/*
 * Teng -- a general purpose templating engine.
 * Copyright (C) 2004  Seznam.cz, a.s.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Seznam.cz, a.s.
 * Naskove 1, Praha 5, 15000, Czech Republic
 * http://www.seznam.cz, mailto:teng@firma.seznam.cz
 *
 *
 * $Id: tengcode.h,v 1.2 2004-12-30 12:42:01 vasek Exp $
 *
 * DESCRIPTION
 * Teng byte-code generation.
 *
 * AUTHORS
 * Stepan Skrob <stepan@firma.seznam.cz>
 *
 * HISTORY
 * 2003-09-30  (stepan)
 *             Created.
 */

#ifndef TENGCODE_H
#define TENGCODE_H

#include "tengparsercontext.h"
#include "tenginstruction.h"
#include "tengparservalue.h"

namespace Teng {

/** Generate byte-code for general instruction.
 *
 * @param ctx A parser context.
 * @param opcode Instruction code.
 * @param value Optional instruction parameter value(s).
 */
std::size_t
generateCode(Parser::Context_t *ctx,
             Instruction_t::OpCode_t opcode,
             const Parser::Symbol_t &value = Parser::Symbol_t(),
             const Parser::Symbol_t &opt_value = Parser::Symbol_t());

/** Generate byte-code for general instruction.
 *
 * @param ctx A parser context.
 * @param code1 Instruction code.
 * @param code2 Instruction code.
 */
inline std::size_t
generateCode(Parser::Context_t *ctx,
             Instruction_t::OpCode_t code1,
             Instruction_t::OpCode_t code2)
{
    auto tmp = generateCode(ctx, code1);
    generateCode(ctx, code2);
    return tmp;
}


/** Generate byte-code for teng expression.
 *
 * @param ctx A parser context.
 * @param code Instruction code.
 * @param value Optional instruction parameter value(s).
 */
unsigned int
generateExpression(Parser::Context_t *ctx,
                   unsigned int start,
                   Instruction_t::OpCode_t code1,
                   bool negated = false);

/** Generate byte-code for general instruction and replace whole program with
 * generated byte code.
 *
 * @param ctx A parser context.
 * @param code Instruction code.
 * @param symbol Optional instruction parameter value(s).
 */
void replaceCode(Parser::Context_t *ctx,
                 Instruction_t::OpCode_t code,
                 const Parser::Symbol_t &symbol);


/** Generate byte-code for a function call.
 *
 * Also optimize 'unescape($variable)' call.
 * @param ctx A parser context.
 * @param name The function name.
 * @param narams Number of params in the call.
 */
void generateFunctionCall(Parser::Context_t *ctx,
                          const std::string &name,
                          int nparams);

/** Generate byte-code for printing a value.
 *
 * @param ctx A parser context.
 */
void generatePrint(Parser::Context_t *ctx);

/** Generate byte-code for printing a value.
 *
 * @param ctx A parser context.
 * @param symbol What should be printed (constant assumed).
 */
void generatePrint(Parser::Context_t *ctx, const Parser::Symbol_t &symbol);

/** Optimize byte code for static expressions.
 *
 * Expressions are examined for evaluation (from given start to end of prog)
 * and on success result is substituted instead of tested expression code.
 *
 * @param ctx A parser context.
 * @param start Expressions starting address within program.
 */
void optimizeExpression(Parser::Context_t *ctx, unsigned int start);

/** Removes code from starting position to end.
 *
 * @param ctx A parser context.
 * @param start Expressions starting address within program.
 */
void eraseCodeFrom(Parser::Context_t *ctx, unsigned int start);

/** Generate byte-code for stoping the processor.
 *
 * @param ctx A parser context.
 */
void generateHalt(Parser::Context_t *ctx);

} // namespace Teng

#endif // TENGCODE_H
